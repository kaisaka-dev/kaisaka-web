// Types based on the enums provided
export enum ImprovementStatus {
  IMPROVED = 'improved',
  NEUTRAL = 'neutral',
  REGRESSED = 'regressed'
}

export enum CompletionStatus {
  PLANNED = 'planned',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled'
}

export enum ParticipantType {
  CAREGIVER = 'caregiver',
  CHILD = 'child'
}

export enum InterventionType {
  EDUCATION = 'education',
  SOCIAL = 'social'
}

// Interface definitions
export interface ChildInterventionStatus {
  childId: string;
  firstName: string;
  lastName: string;
  hasIndividualInterventionPlan: boolean;
  hasTransitionGraduationPlan: boolean;
  hasActiveInterventions: boolean;
  latestInterventionStatus?: ImprovementStatus;
  interventionCount: number;
}

export interface InterventionProgress {
  childId: string;
  firstName: string;
  lastName: string;
  intervention: string;
  serviceCategory: string;
  currentStatus: ImprovementStatus;
  dateChecked: string;
  historicalStatus: ImprovementStatus;
  improvement: string;
  remarks?: string;
}

export interface AttendanceRecord {
  childId: string;
  firstName: string;
  lastName: string;
  activityName: string;
  dateAndTimeConducted: string;
  individualInterventionPlan: boolean;
  transitionGraduationPlan: boolean;
  remarks?: string;
}

// Repository class
export class ChildInterventionRepository {
  constructor(private supabase: any) {}

  /**
   * Check if a child has an Individual Intervention Plan
   */
  async hasIndividualInterventionPlan(childId: string): Promise<boolean> {
    const { data, error } = await this.supabase
      .from('attendance_log')
      .select(`
        individual_intervention_plan,
        members!inner(
          children!inner(id)
        )
      `)
      .eq('members.children.id', childId)
      .eq('individual_intervention_plan', true)
      .limit(1);

    if (error) throw error;
    return data && data.length > 0;
  }

  /**
   * Check if a child has a Transition/Graduation Plan
   */
  async hasTransitionGraduationPlan(childId: string): Promise<boolean> {
    const { data, error } = await this.supabase
      .from('attendance_log')
      .select(`
        transition_graduation_plan,
        members!inner(
          children!inner(id)
        )
      `)
      .eq('members.children.id', childId)
      .eq('transition_graduation_plan', true)
      .limit(1);

    if (error) throw error;
    return data && data.length > 0;
  }

  /**
   * Get intervention progress for a specific child
   */
  async getInterventionProgress(childId: string): Promise<InterventionProgress[]> {
    const { data, error } = await this.supabase
      .from('intervention_history')
      .select(`
        date_checked,
        status,
        improvement,
        remarks,
        intervention!inner(
          intervention,
          status,
          service_category!inner(name),
          children!inner(
            id,
            members!inner(
              first_name,
              last_name
            )
          )
        )
      `)
      .eq('intervention.children.id', childId)
      .order('date_checked', { ascending: false });

    if (error) throw error;

    return data?.map((record: any) => ({
      childId,
      firstName: record.intervention.children.members.first_name,
      lastName: record.intervention.children.members.last_name,
      intervention: record.intervention.intervention,
      serviceCategory: record.intervention.service_category.name,
      currentStatus: record.intervention.status as ImprovementStatus,
      dateChecked: record.date_checked,
      historicalStatus: record.status as ImprovementStatus,
      improvement: record.improvement,
      remarks: record.remarks
    })) || [];
  }

  /**
   * Get comprehensive intervention status for a child
   */
  async getChildInterventionStatus(childId: string): Promise<ChildInterventionStatus | null> {
    // Get basic member info
    const { data: memberData, error: memberError } = await this.supabase
      .from('children')
      .select(`
        id,
        members!inner(
          id,
          first_name,
          last_name
        )
      `)
      .eq('id', childId)
      .single();

    if (memberError) throw memberError;
    if (!memberData) return null;

    // Check for individual intervention plan
    const hasIIP = await this.hasIndividualInterventionPlan(childId);

    // Check for transition/graduation plan
    const hasTGP = await this.hasTransitionGraduationPlan(childId);

    // Get intervention count and latest status
    const { data: interventionData, error: interventionError } = await this.supabase
      .from('intervention')
      .select('id, status')
      .eq('child_id', childId);

    if (interventionError) throw interventionError;

    const interventionCount = interventionData?.length || 0;
    const latestInterventionStatus = interventionData && interventionData.length > 0 
      ? interventionData[0].status as ImprovementStatus
      : undefined;

    return {
      childId,
      firstName: memberData.members.first_name,
      lastName: memberData.members.last_name,
      hasIndividualInterventionPlan: hasIIP,
      hasTransitionGraduationPlan: hasTGP,
      hasActiveInterventions: interventionCount > 0,
      latestInterventionStatus,
      interventionCount
    };
  }

  /**
   * Get attendance records with intervention plans for a child
   */
  async getAttendanceWithInterventionPlans(childId: string): Promise<AttendanceRecord[]> {
    const { data, error } = await this.supabase
      .from('attendance_log')
      .select(`
        individual_intervention_plan,
        transition_graduation_plan,
        remarks,
        activity!inner(
          name,
          date_and_time_conducted
        ),
        members!inner(
          first_name,
          last_name,
          children!inner(id)
        )
      `)
      .eq('members.children.id', childId)
      .or('individual_intervention_plan.eq.true,transition_graduation_plan.eq.true')
      .order('activity.date_and_time_conducted', { ascending: false });

    if (error) throw error;

    return data?.map((record: any) => ({
      childId,
      firstName: record.members.first_name,
      lastName: record.members.last_name,
      activityName: record.activity.name,
      dateAndTimeConducted: record.activity.date_and_time_conducted,
      individualInterventionPlan: record.individual_intervention_plan,
      transitionGraduationPlan: record.transition_graduation_plan,
      remarks: record.remarks
    })) || [];
  }

  /**
   * Get improvement timeline for a child
   */
  async getImprovementTimeline(childId: string): Promise<InterventionProgress[]> {
    const { data, error } = await this.supabase
      .from('intervention_history')
      .select(`
        date_checked,
        status,
        improvement,
        remarks,
        intervention!inner(
          intervention,
          status,
          service_category!inner(name),
          children!inner(
            id,
            members!inner(
              first_name,
              last_name
            )
          )
        )
      `)
      .eq('intervention.children.id', childId)
      .order('date_checked', { ascending: true });

    if (error) throw error;

    return data?.map((record: any, index: number) => ({
      childId,
      firstName: record.intervention.children.members.first_name,
      lastName: record.intervention.children.members.last_name,
      intervention: record.intervention.intervention,
      serviceCategory: record.intervention.service_category.name,
      currentStatus: record.intervention.status as ImprovementStatus,
      dateChecked: record.date_checked,
      historicalStatus: record.status as ImprovementStatus,
      improvement: record.improvement,
      remarks: record.remarks
    })) || [];
  }

  /**
   * Get summary for all active children
   */
  async getAllChildrenInterventionSummary(): Promise<ChildInterventionStatus[]> {
    const { data, error } = await this.supabase
      .from('children')
      .select(`
        id,
        members!inner(
          id,
          first_name,
          last_name
        )
      `)
      .eq('is_active', true);

    if (error) throw error;

    const summaries: ChildInterventionStatus[] = [];
    
    for (const child of data || []) {
      const summary = await this.getChildInterventionStatus(child.id);
      if (summary) {
        summaries.push(summary);
      }
    }

    return summaries;
  }

  /**
   * Check if child has improved based on latest intervention history
   */
  async hasChildImproved(childId: string): Promise<boolean> {
    const { data, error } = await this.supabase
      .from('intervention_history')
      .select(`
        status,
        intervention!inner(
          children!inner(id)
        )
      `)
      .eq('intervention.children.id', childId)
      .order('date_checked', { ascending: false })
      .limit(1);

    if (error) throw error;
    
    return data && data.length > 0 && data[0].status === ImprovementStatus.IMPROVED;
  }
}

// Usage example
export class ChildInterventionService {
  constructor(private repository: ChildInterventionRepository) {}

  async checkChildStatus(childId: string) {
    try {
      const status = await this.repository.getChildInterventionStatus(childId);
      
      if (!status) {
        throw new Error('Child not found');
      }

      const progress = await this.repository.getInterventionProgress(childId);
      const hasImproved = await this.repository.hasChildImproved(childId);

      return {
        ...status,
        hasImproved,
        progressHistory: progress
      };
    } catch (error) {
      console.error('Error checking child status:', error);
      throw error;
    }
  }

  async generateInterventionReport(childId: string) {
    const status = await this.repository.getChildInterventionStatus(childId);
    const timeline = await this.repository.getImprovementTimeline(childId);
    const attendance = await this.repository.getAttendanceWithInterventionPlans(childId);

    return {
      childInfo: status,
      improvementTimeline: timeline,
      interventionActivities: attendance
    };
  }
}

// Example usage
/*
const supabase = createClient(url, key);
const repository = new ChildInterventionRepository(supabase);
const service = new ChildInterventionService(repository);

// Check specific child
const childStatus = await service.checkChildStatus('child-uuid-here');
console.log(childStatus);

// Generate comprehensive report
const report = await service.generateInterventionReport('child-uuid-here');
console.log(report);
*/